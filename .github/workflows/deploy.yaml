name: Deploy ConcesionarioApp to AKS

on:
  push:
    branches:
      - main

env:
  AZURE_LOCATION: 'westeurope'
  RG_ACR_NAME: 'rg-concesionario-acr'
  ACR_NAME: 'concesionarioarc'        # Debe ser √∫nico y en min√∫sculas
  RG_AKS_NAME: 'rg-concesionario-aks'
  AKS_CLUSTER_NAME: 'concesionarioaks'
  IMAGE_NAME: 'concesionario-app'
  IMAGE_TAG: 'latest'
  AKS_NODE_COUNT: 1
  AKS_NODE_SIZE: 'Standard_B2s'

jobs:
  build_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR with Maven
        run: mvn clean package

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Crear RG, ACR y AKS si no existen 
        shell: pwsh
        run: |
          Write-Host "üîç Verificando recursos en Azure..."

          # Verificar y crear grupo de recursos AKS
          if (-not (az group show --name $env:RG_AKS_NAME 2>$null)) {
            Write-Host "‚ûï Creando grupo de recursos AKS: $env:RG_AKS_NAME"
            az group create --name $env:RG_AKS_NAME --location $env:AZURE_LOCATION
          } else {
            Write-Host "‚úÖ Grupo de recursos $env:RG_AKS_NAME ya existe"
          }

          # Verificar y crear grupo y ACR
          if (-not (az acr show --name $env:ACR_NAME --resource-group $env:RG_ACR_NAME 2>$null)) {
            Write-Host "‚ûï Creando grupo de recursos ACR (si no existe): $env:RG_ACR_NAME"
            az group create --name $env:RG_ACR_NAME --location $env:AZURE_LOCATION

            Write-Host "‚ûï Creando ACR: $env:ACR_NAME"
            az acr create `
              --name $env:ACR_NAME `
              --resource-group $env:RG_ACR_NAME `
              --sku Basic `
              --admin-enabled true
          } else {
            Write-Host "‚úÖ ACR $env:ACR_NAME ya existe"
          }
          # Verificar y crear cl√∫ster AKS
          if (-not (az aks show --name $env:AKS_CLUSTER_NAME --resource-group $env:RG_AKS_NAME 2>$null)) {
            Write-Host "‚ûï Creando cl√∫ster AKS: $env:AKS_CLUSTER_NAME"
            az aks create `
              --resource-group $env:RG_AKS_NAME `
              --name $env:AKS_CLUSTER_NAME `
              --node-count $env:AKS_NODE_COUNT `
              --node-vm-size $env:AKS_NODE_SIZE `
              --generate-ssh-keys `
              --attach-acr $env:ACR_NAME
          } else {
            Write-Host "‚úÖ Cl√∫ster AKS $env:AKS_CLUSTER_NAME ya existe"

            # üîê Asegurar que el ACR est√© vinculado incluso si ya exist√≠a el cl√∫ster
            Write-Host "üîÑ Asegurando la vinculaci√≥n del ACR con el AKS"
            az aks update `
              --name $env:AKS_CLUSTER_NAME `
              --resource-group $env:RG_AKS_NAME `
              --attach-acr $env:ACR_NAME
          }


      - name: Login to ACR
        run: az acr login --name $ACR_NAME

      - name: Build and push Docker image
        run: |
          docker build -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG .
          docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials and deploy manifests
        run: |
          az aks get-credentials -n $AKS_CLUSTER_NAME -g $RG_AKS_NAME --overwrite-existing
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml
          kubectl apply -f ./k8s/ingress.yaml
      
      - name: Wait for Ingress IP  # Esperar un poco para la IP
        shell: pwsh
        run: |
          $maxRetries = 30
          for ($i = 1; $i -le $maxRetries; $i++) {
            $ip = kubectl get ingress concesionario-ingress -o jsonpath="{.status.loadBalancer.ingress[0].ip}"
            if (![string]::IsNullOrEmpty($ip)) {
              Write-Host "Ingress IP: $ip"
              break
            }
            Write-Host "Waiting for ingress IP... [$i/$maxRetries]"
            Start-Sleep -Seconds 10
          }

