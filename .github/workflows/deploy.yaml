name: Deploy ConcesionarioApp to AKS

on:
  push:
    branches:
      - main

env:
  RESOURCE_GROUP_AKS: rg-concesionario-aks
  RESOURCE_GROUP_ACR: rg-concesionario-acr
  ACR_NAME: concesionarioacr
  ACR_SKU: Basic
  AKS_NAME: concesionarioaks
  LOCATION: westeurope
  NAMESPACE: concesionario-ns
  IMAGE_NAME: concesionario-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR with Maven
        run: mvn clean package

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create ACR Resource Group if not exists
        shell: pwsh
        run: |
          if (-not (az group show --name $env:RESOURCE_GROUP_ACR -o none 2>$null)) {
            az group create --name $env:RESOURCE_GROUP_ACR --location $env:LOCATION
          }

      - name: Create ACR if not exists
        shell: pwsh
        run: |
          if (-not (az acr show --name $env:ACR_NAME -g $env:RESOURCE_GROUP_ACR -o none 2>$null)) {
            az acr create --name $env:ACR_NAME --resource-group $env:RESOURCE_GROUP_ACR --sku $env:ACR_SKU --location $env:LOCATION --admin-enabled true
          }
          $acrLoginServer = az acr show --name $env:ACR_NAME --resource-group $env:RESOURCE_GROUP_ACR --query loginServer -o tsv
          echo "ACR_LOGIN_SERVER=$acrLoginServer" >> $env:GITHUB_ENV

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest .
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

      - name: Create AKS Resource Group if not exists
        shell: pwsh
        run: |
          if (-not (az group show --name $env:RESOURCE_GROUP_AKS -o none 2>$null)) {
            az group create --name $env:RESOURCE_GROUP_AKS --location $env:LOCATION
          }

      - name: Create AKS cluster if not exists
        shell: pwsh
        run: |
          if (-not (az aks show --name $env:AKS_NAME --resource-group $env:RESOURCE_GROUP_AKS -o none 2>$null)) {
            az aks create `
              --name $env:AKS_NAME `
              --resource-group $env:RESOURCE_GROUP_AKS `
              --node-count 1 `
              --generate-ssh-keys `
              --attach-acr $env:ACR_NAME
          }

      - name: Get AKS credentials
        shell: pwsh
        run: |
          az aks get-credentials --name $env:AKS_NAME --resource-group $env:RESOURCE_GROUP_AKS --overwrite-existing

      - name: Create AKS namespace if needed
        shell: pwsh
        run: |
          $ns = kubectl get namespace $env:NAMESPACE --ignore-not-found
          if (-not $ns) {
            kubectl create namespace $env:NAMESPACE
          }

      - name: Deploy app to AKS
        shell: pwsh
        run: |
          $imageName = "$env:ACR_LOGIN_SERVER/$env:IMAGE_NAME:latest"
          $deploymentYaml = @"
apiVersion: apps/v1
kind: Deployment
metadata:
  name: concesionario-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: concesionario
  template:
    metadata:
      labels:
        app: concesionario
    spec:
      containers:
      - name: concesionario
        image: $imageName
        imagePullPolicy: Always
        command: ["java", "-jar", "ConcesionarioApp.jar"]
"@
          $deploymentYaml | Out-File -Encoding utf8 deployment.yaml
          kubectl apply -n $env:NAMESPACE -f deployment.yaml
